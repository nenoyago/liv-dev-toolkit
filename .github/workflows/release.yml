name: 🦋 Auto Release Public Packages

on:
  push:
    branches:
      - main

env:
  CI: true
  HUSKY: 0

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: 🚀 Complete Release (Version + Publish)
    environment: Semver
    # 🔹 Só executa para commits que não são de release
    if: |
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, 'RELEASING:') &&
      !contains(github.event.head_commit.message, 'Automatically merged by release workflow')
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.6.5

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: ⚡ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Check for changesets
        id: changeset-check
        run: |
          if [ -d ".changeset" ] && [ "$(find .changeset -maxdepth 1 -name '*.md' -not -name 'README.md' | wc -l | tr -d ' ')" -gt 0 ]; then
            echo "HAS_CHANGESETS=true" >> $GITHUB_OUTPUT
            echo "✅ Changesets found - proceeding with release"
          else
            echo "HAS_CHANGESETS=false" >> $GITHUB_OUTPUT
            echo "📭 No changesets found - skipping release"
          fi

      - name: ⏭️ Skip if no changesets
        if: steps.changeset-check.outputs.HAS_CHANGESETS == 'false'
        run: |
          echo "❌ No changesets detected. Skipping release process."
          exit 0

      - name: 🌿 Create release branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions@users.noreply.github.com"
          NEW_BRANCH="release/auto-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $NEW_BRANCH
          echo "NEW_BRANCH=$NEW_BRANCH" >> $GITHUB_ENV

      - name: 📝 Version packages
        run: pnpm changeset version

      - name: 💾 Commit version changes
        id: commit-changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "✅ No version changes to commit"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            git commit -m "chore(release): update package versions"
            echo "📦 Version changes committed"
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi

      - name: ⬆️ Push release branch
        if: env.HAS_CHANGES == 'true'
        run: git push origin $NEW_BRANCH

      - name: 🏷️ Ensure release labels exist
        if: env.HAS_CHANGES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh label create "🤖 auto-release" --color 6F42C1 --description "Automated version updates" --force || true
          gh label create "🚀 release" --color FFD33D --description "Package releases" --force || true

      - name: 📬 Create Release PR
        if: env.HAS_CHANGES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "🔄 Creating pull request for branch: $NEW_BRANCH"

          PR_INFO=$(gh pr create \
            --title "🚀 Release: Package Version Updates" \
            --body "## 📦 Package Release
          This PR updates package versions based on changesets and will automatically publish to npm.

          ### Changes
          - Version updates from changesets
          - Automated release process
          - Will publish to npm upon merge

          *Auto-generated by release workflow*" \
                      --base main \
                      --head $NEW_BRANCH \
                      --label "🤖 auto-release,🚀 release")

                    PR_NUMBER=$(echo "$PR_INFO" | grep -oE '[0-9]+' | head -1)
                    PR_URL="https://github.com/$GITHUB_REPOSITORY/pull/$PR_NUMBER"
                    
                    echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
                    echo "PR_URL=$PR_URL" >> $GITHUB_ENV
                    
                    echo "🎉 PR created: #$PR_NUMBER"
                    echo "🔗 $PR_URL"

      - name: ⏱️ Wait for PR checks
        if: env.HAS_CHANGES == 'true'
        run: sleep 10

      - name: 🔀 Merge Release PR
        if: env.HAS_CHANGES == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -n "$PR_NUMBER" ]; then
            echo "🔄 Merging PR #$PR_NUMBER..."
            gh pr merge $PR_NUMBER \
              --merge \
              --admin \
              --delete-branch \
              --body "Automatically merged by release workflow"
            echo "✅ PR #$PR_NUMBER merged successfully"
          else
            echo "❌ PR number not found"
            exit 1
          fi

      - name: 🔐 Setup npm authentication
        if: env.HAS_CHANGES == 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc

      - name: 📦 Publish to npm
        if: env.HAS_CHANGES == 'true'
        run: |
          echo "🚀 Publishing packages to npm..."
          pnpm changeset publish
          echo "✅ Packages published successfully!"

      - name: 🎉 Release summary
        if: env.HAS_CHANGES == 'true'
        run: |
          echo "========================================"
          echo "🎉 RELEASE COMPLETED SUCCESSFULLY!"
          echo "========================================"
          echo "📦 Packages versioned and published"
          echo "🌿 Branch: $NEW_BRANCH"
          echo "🔗 PR: https://github.com/$GITHUB_REPOSITORY/pull/$PR_NUMBER"
          echo "========================================"
