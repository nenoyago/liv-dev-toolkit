name: üìù Valida√ß√£o de Changeset

on:
  pull_request:
    # Dispara a cada abertura, nova submiss√£o de c√≥digo (synchronize) e reabertura
    types: [opened, synchronize, reopened]

jobs:
  validate-changeset:
    # ‚ö†Ô∏è IMPORTANTE: Use o token padr√£o GITHUB_TOKEN.
    # Ele √© mais seguro e n√£o precisa ser configurado como um segredo customizado.
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # Necess√°rio para criar/atualizar coment√°rios e rodar a checagem de status

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          # A profundidade de fetch (fetch-depth: 0) √© crucial para que o Changesets
          # consiga comparar o branch da PR com o branch principal (target branch).
          fetch-depth: 0

      # 2Ô∏è‚É£ Instala√ß√£o (Exemplo: se voc√™ usa Node.js e pnpm)
      - name: üõ†Ô∏è Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: 22.14
          # üëà O cache: 'pnpm' √© o que garante que o 'pnpm' seja instalado e fique dispon√≠vel no PATH!
          cache: 'pnpm'
          pnpm-version: '10.6.5'

      - name: üì¶ Install dependencies
        # Este step deve vir logo ap√≥s o setup-node
        run: pnpm install --frozen-lockfile

      # ---

      # 3Ô∏è‚É£ Skip CI for auto-release commits (Melhorado com l√≥gica de tag)
      - name: üö´ Skip auto-release commits
        id: skip_commit
        run: |
          # A melhor pr√°tica √© checar se o commit √© de um bot (por exemplo, dependabot ou o bot de release)
          # ou se cont√©m a tag de ignorar CI.
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B | tr '\n' ' ')

          # A verifica√ß√£o 'github.actor == "github-actions[bot]"' no 'if' do job/step
          # √© o m√©todo preferido. Moveremos esta l√≥gica para um 'if' principal.

          if echo "$LAST_COMMIT_MSG" | grep -q '\[skip ci\]' || echo "$LAST_COMMIT_MSG" | grep -q 'Version Packages'; then
            echo "‚ö†Ô∏è Commit de auto-release detectado. Ignorando valida√ß√£o."
            echo "skip_changeset_validation=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip_changeset_validation=false" >> "$GITHUB_OUTPUT"
          fi

      # 4Ô∏è‚É£ Skip Branch Validation (Simplificado)
      # N√£o √© necess√°rio um step separado para sair do workflow, o pr√≥ximo step cuida disso.
      - name: üè∑Ô∏è Validate branch name & skip logic
        id: branch
        if: steps.skip_commit.outputs.skip_changeset_validation == 'false'
        run: |
          BRANCH="${{ github.head_ref }}"

          # Prefixo para ramos que DEVEM ter changeset (feat, fix, hotfix, refactor)
          CHANGESET_REQUIRED_PREFIXES="^(feat/|feature/|fix/|hotfix/|refactor/)"

          # Prefixos que N√ÉO DEVEM ter changeset (chore, docs, release, test)
          CHANGESET_SKIPPED_PREFIXES="^(chore/|docs/|test/|release/|beta/)"

          # 1. Valida Nomenclatura (Regra mais estrita)
          ALLOWED_PREFIXES="^($CHANGESET_REQUIRED_PREFIXES|$CHANGESET_SKIPPED_PREFIXES)"
          if [[ ! "$BRANCH" =~ $ALLOWED_PREFIXES ]]; then
            echo "üö® Branch inv√°lido: $BRANCH. Use um dos prefixes permitidos (feat/, fix/, chore/, etc.)."
            exit 1 # Falha o workflow
          fi

          # 2. Define o status de skip
          if [[ "$BRANCH" =~ $CHANGESET_SKIPPED_PREFIXES ]]; then
            echo "‚ö†Ô∏è Branch de manuten√ß√£o (chore/docs/release) detectada ($BRANCH); pulando checagem de changeset."
            echo "changeset_validation_needed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changeset_validation_needed=true" >> "$GITHUB_OUTPUT"
          fi

      # ---

      # 5Ô∏è‚É£ Validate presence of changeset using Changesets CLI (A melhor pr√°tica)
      - name: üìù Validate changeset presence (Changesets CLI)
        id: validate_changeset
        # S√≥ executa se a valida√ß√£o de commit e branch n√£o mandarem pular
        if: steps.skip_commit.outputs.skip_changeset_validation == 'false' && steps.branch.outputs.changeset_validation_needed == 'true'
        # Usamos continue-on-error: true pois queremos que a falha da CLI seja tratada
        # pelo 'if' do step 9, mas permitimos que os steps de coment√°rios rodem.
        continue-on-error: true
        run: |
          # A CLI Changesets retorna um c√≥digo de erro se n√£o encontrar changesets desde 'main'
          pnpm changeset status --since=main
          EXIT_CODE=$?

          if [ $EXIT_CODE -eq 0 ]; then
            echo "changeset_found=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Changeset(s) v√°lido(s) encontrado(s)."
          else
            echo "changeset_found=false" >> "$GITHUB_OUTPUT"
            echo "‚ùå Nenhum changeset encontrado."
          fi

      # ---
      # Steps de Coment√°rios (Simplificados e unificados)
      # ---

      # 6Ô∏è‚É£ Find existing bot comment
      - name: üîç Find existing comment
        id: find_comment
        # Usa o token GITHUB_TOKEN padr√£o
        uses: actions/github-script@v8
        if: always() && steps.skip_commit.outputs.skip_changeset_validation == 'false' && steps.branch.outputs.changeset_validation_needed == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # üëà Use GITHUB_TOKEN
          script: |
            const BOT_COMMENT_MARKER = '';
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const botComment = comments.data.find(comment => 
              comment.body.includes(BOT_COMMENT_MARKER)
            );

            core.setOutput('comment_id', botComment ? botComment.id : '');

      # 7Ô∏è‚É£ Update/Create comment (Unificado)
      - name: üí¨ Manage Validation Comment
        uses: actions/github-script@v8
        if: always() && steps.skip_commit.outputs.skip_changeset_validation == 'false' && steps.branch.outputs.changeset_validation_needed == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # üëà Use GITHUB_TOKEN
          script: |
            const commentId = "${{ steps.find_comment.outputs.comment_id }}";
            const changesetFound = "${{ steps.validate_changeset.outputs.changeset_found }}" === 'true';
            const BOT_COMMENT_MARKER = '';

            let commentBody;

            if (changesetFound) {
              // Coment√°rio de Sucesso
              commentBody = `## ‚úÖ Changeset Encontrado
              
              Perfeito! Esta PR est√° pronta para o merge e cont√©m o(s) changeset(s) necess√°rio(s). ‚ú®

              ### üì¶ Pr√≥ximos passos:
              - Os changesets ser√£o processados automaticamente ap√≥s o merge.
              - As vers√µes dos pacotes e o changelog ser√£o atualizados.
              
              ---
              ${BOT_COMMENT_MARKER}
              *ü§ñ √öltima verifica√ß√£o: ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}*`;

            } else {
              // Coment√°rio de Falha
              commentBody = `## ‚ùå Changeset N√£o Encontrado
              
              Esta PR precisa de um **changeset** para documentar as mudan√ßas e habilitar a pr√≥xima vers√£o.

              ### üìã Como adicionar um changeset (usando \`pnpm\`):

              **Op√ß√£o 1: Interativo (Recomendado)**
              \`\`\`bash
              pnpm changeset
              \`\`\`
              
              **Op√ß√£o 2: Vazio (Apenas para mudan√ßas triviais)**
              \`\`\`bash
              pnpm changeset add --empty
              \`\`\`

              ### üìö Documenta√ß√£o
              - [Guia Changesets (EN)](https://github.com/changesets/changesets/blob/main/docs/intro-to-using-changesets.md)

              ---
              ${BOT_COMMENT_MARKER}
              *ü§ñ √öltima verifica√ß√£o: ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}*`;
            }

            if (commentId) {
              // Atualiza coment√°rio existente
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
                body: commentBody
              });
            } else {
              // Cria novo coment√°rio
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

      # 8Ô∏è‚É£ Final validation status (Faz a PR falhar se n√£o houver changeset)
      - name: üéØ Final validation Failure
        if: steps.branch.outputs.changeset_validation_needed == 'true' && steps.validate_changeset.outputs.changeset_found == 'false'
        run: |
          echo "‚ùå O Workflow falhou: o changeset √© necess√°rio e n√£o foi encontrado."
          exit 1
